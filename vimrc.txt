syntax on

" {{{
    source $VIMRUNTIME/vimrc_example.vim

    set diffexpr=MyDiff()
    function! MyDiff()
      let opt = '-a --binary '
      if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
      if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
      let arg1 = v:fname_in
      if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
      let arg1 = substitute(arg1, '!', '\!', 'g')
      let arg2 = v:fname_new
      if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
      let arg2 = substitute(arg2, '!', '\!', 'g')
      let arg3 = v:fname_out
      if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
      let arg3 = substitute(arg3, '!', '\!', 'g')
      if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
          if empty(&shellxquote)
            let l:shxq_sav = ''
            set shellxquote&
          endif
          let cmd = '"' . $VIMRUNTIME . '\diff"'
        else
          let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
      else
        let cmd = $VIMRUNTIME . '\diff'
      endif
      let cmd = substitute(cmd, '!', '\!', 'g')
      silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
      if exists('l:shxq_sav')
        let &shellxquote=l:shxq_sav
      endif
    endfunction
" }}}

" Misc {{{
    " set autoindenting on
    set autoindent

    " enable smart indent
    set smartindent

    " auto reload files as they change on disk
    set autoread

    " redraw only when need to
    set lazyredraw

    " enable side scrolling
    set sidescroll=1

    " make the search case sensitive if uppercase letter available
    set ignorecase
    set smartcase

    " highlight matches
    set hlsearch

    " turn off search highlight
    set nohlsearch

    " prevent creating swap file on save
    set noswapfile

    " prevent creating backup file on save
    set nobackup
    set nowritebackup

    " prevent creating undo file on save
    set noundofile

    " do not automatically wrap on load
    set nowrap

    " do not automatically wrap text when typing
    set formatoptions-=t

    " do not automatically insert the current comment leader after hitting <Enter> in Insert mode.
    set formatoptions-=r

    " do not automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
    set formatoptions-=o

    " set leader to comma
    let mapleader=","

    " open the new file on the right when splitting a view
    set splitright

    " copy to clipboard
    vmap <C-c> "+y

    " paste from clipboard
    imap <C-v> <S-Insert>

    " search highlighted word
    vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

    " enable UTF characters
    set encoding=utf-8
    set fileencoding=utf-8
" }}}

" Folding {{{
    " enable folding
    set foldenable

    " open most folds by default
    set foldlevelstart=10

    " set most number of folds allowed
    set foldnestmax=10

    " fold based on the indent level
    set foldmethod=indent

    " enable modelines (used in this file on the last line)
    set modelines=1

    " close folds having one screen line
    set fml=0

    " space key opens/closes folds
    nnoremap <space> za

    " set foldlevel to 0
    nnoremap <leader>0 :set foldlevel=0<CR>

    " set foldlevel to 1
    nnoremap <leader>1 :set foldlevel=1<CR>

    " set foldlevel to 2
    nnoremap <leader>2 :set foldlevel=2<CR>

    " set foldlevel to 3
    nnoremap <leader>3 :set foldlevel=3<CR>

    " set foldlevel to 4
    nnoremap <leader>4 :set foldlevel=4<CR>

    " set foldlevel to 5
    nnoremap <leader>5 :set foldlevel=5<CR>
" }}}

" Spaces and Tabs {{{
    " number of visual spaces per TAB
    set tabstop=4

    " number of spaces in tab when editing
    set softtabstop=4

    " set the number of spaces to shift when indenting in normal mode
    set shiftwidth=4

    " convert tabs to spaces
    set expandtab
" }}}

" UI {{{
    " show hybrid line numbers
    set number
    set relativenumber

    " remove space between lines
    set linespace=0

    " Hide Menu Bar
    set guioptions -=m

    " Hide Tool Bar
    set guioptions -=T

    " Hide left scrollbar
    set guioptions-=l

    " Hide left scrollbar when windows are vertically split
    set guioptions-=L

    " Hide right scrollbar
    set guioptions-=r

    " Hide left scrollbar when windows are vertically split
    set guioptions-=R

    " set editor font
    set guifont=Fira_Code_SemiBold:h12:W600:cANSI:qDRAFT
" }}}

" Movement Keymaps {{{
    " map semicolon to colon
    map ; :

    " jk is escape
    inoremap jk <esc>

    " JK is escape
    inoremap JK <esc>

    " Jump to the window left to the current window
    map <C-h> <C-w>h

    " Jump to the window right to the current window
    map <C-l> <C-w>l

    " Jump to the window above the current window
    map <C-k> <C-w>k

    " Jump to the window below the current window
    map <C-j> <C-w>j
" }}}

" Tab Keymaps {{{
    " Open new tab
    map tn :tabnew<CR>

    " Go to first tab
    map ts :tabfirst<CR>

    " Go to last tab
    map te :tablast<CR>

    " Go to next tab
    map tj :tabnext<CR>

    " Go to previous tab
    map tk :tabprev<CR>

    " Move current tab to the left
    map th :tabm -1<CR>

    " Move current tab to the right
    map tl :tabm +1<CR>

    " close tabs to the right
    map <Leader>ta :.+1,$tabdo :tabc<CR>
" }}}

" Combination Keymaps {{{
    " reload vim to apply vimrc updates
    map <F5> :source $MYVIMRC<CR>

    " open vimrc
    map <F2> :e $MYVIMRC<CR>

    " find and replace
    map <Leader>r :.,$s/

    " copy file path
    " Convert slashes to backslashes for Windows.
    if has('win32')
      " copy path with forward slashes
      nmap <Leader>fs :let @*=substitute(expand("%"), "\\", "/", "g")<CR>
      nmap <Leader>fl :let @*=substitute(expand("%:p"), "\\", "/", "g")<CR>

      " copy path with back slashes
      nmap <Leader>bfs :let @*=expand("%")<CR>
      nmap <Leader>bfl :let @*=expand("%:p")<CR>

      " This will copy the path in 8.3 short format, for DOS and Windows 9x
      "nmap <Leader>f8 :let @*=substitute(expand("%:p:8"), "\\", "/", "g")<CR>
    else
      nmap <Leader>fs :let @*=expand("%")<CR>
      nmap <Leader>fl :let @*=expand("%:p")<CR>
    endif
" }}}

" Plugins {{{
    " Specify a directory for plugins
    " - For Neovim: stdpath('data') . '/plugged'
    " - Avoid using standard Vim directory names like 'plugin'
    call plug#begin('~/.vim/plugged')

    Plug 'danishprakash/vim-yami'
    Plug 'easymotion/vim-easymotion'
    Plug 'GrzegorzKozub/vimdows'
    Plug 'honza/vim-snippets'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'scrooloose/nerdcommenter'
    Plug 'scrooloose/nerdtree'
    Plug 'terryma/vim-multiple-cursors'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " syntax highlighting
    Plug 'isruslan/vim-es6'
    Plug 'jparise/vim-graphql'
    Plug 'leafgarland/typescript-vim',
    Plug 'MaxMEllon/vim-jsx-pretty'
    Plug 'sheerun/vim-polyglot'

    " themes
    Plug 'arcticicestudio/nord-vim'
    Plug 'ayu-theme/ayu-vim'
    Plug 'hardselius/warlock'
    Plug 'morhetz/gruvbox'

    " Initialize plugin system
    call plug#end()
" }}}

" Plugin settings {{{
    " NERDTree - Toggle file explorer
    map <leader>e :NERDTreeToggle<CR>

    " NERDTree - Find the current file in file explorer
    map <leader>f :NERDTreeFind<CR>

    " NERDTree - Show hidden files in file explorer
    let NERDTreeShowHidden=1

    " easy-motion
    " Move to word
    map  <Leader>w <Plug>(easymotion-bd-w)
    nmap <Leader>w <Plug>(easymotion-overwin-w)
" }}}

" Coc Plugin Settings {{{
    " use enter to confirm completion
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> <leader>k :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " manually trigger diagnostic window
    nnoremap <silent> <leader>/ :call CocAction('diagnosticInfo') <CR>

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Formatting selected code.
    xmap = <Plug>(coc-format-selected)
    nmap = <Plug>(coc-format-selected)

    map <C-p> :CocList files<CR>
    map <C-f> :CocList buffers<CR>
    map <Leader>l :CocList lines<CR>
" }}}

" File specific settings {{{
    " Set the filetype based on the file's extension, overriding any
    " filetype that has already been set
    au BufRead,BufNewFile *.ts set filetype=typescript
    au BufRead,BufNewFile *.tsx set filetype=typescriptreact

    autocmd Filetype html setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype css setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype javascript setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype typescript setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype typescriptreact setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype json setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype text setlocal softtabstop=2 shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype cpp setlocal softtabstop=4 shiftwidth=4 tabstop=4 expandtab
" }}}

" Colors {{{
    set background=dark
    hi clear

    " airline theme
    let g:airline_theme='minimalist' 
    " Disable whitespace warning in airline
    let g:airline#extensions#whitespace#enabled = 0

    " Prevent CoC from highligting the current word
     highlight CocHighlightText guifg=fg guibg=bg

    if (has("termguicolors"))
        set termguicolors
    endif
" }}}

" Night Owl Monochrome Theme {{{
  "hi Normal guibg=#011627 guifg=#c6c9cf
  
  "hi Comment guifg=#4C566A
  "hi Cursor guibg=White guifg=bg
  "hi CursorLine guibg=#2c3043 guifg=White
  "hi Directory guibg=bg guifg=fg
  "hi ErrorMsg guibg=#991B1B guifg=fg
  "hi Folded guibg=bg guifg=#637777
  "hi LineNr guifg=#718096
  "hi MatchParen guibg=#818b99 guifg=bg
  "hi MoreMsg guifg=fg guibg=bg
  "hi NonText guifg=#718096
  "hi Pmenu guibg=#2c3043 guifg=fg
  "hi PmenuSel guifg=bg guibg=fg
  "hi Search guibg=#9CA3AF guifg=Black
  "hi SignColumn guibg=bg guifg=fg
  "hi Todo guibg=bg guifg=#637777
  "hi VertSplit guibg=#637777 guifg=bg
  "hi Visual guibg=#9CA3AF guifg=Black
  "hi WarningMsg guifg=#EF4444
  "hi StatusLineNC guibg=bg guifg=fg
  
  "hi Constant guifg=fg
  "hi Identifier guifg=fg
  "hi PreProc guifg=fg
  "hi Special guifg=fg
  "hi Statement guifg=fg
  "hi Title guifg=fg
  "hi Type guifg=fg
" }}}

" Monochrome Theme {{{
  " TODO: highlight color for NerdTree and COC
  " TODO: fix color for semicolon when using "TODO" keyboard

  hi Normal guibg=#101010 guifg=#AAAAAA
  
  hi Comment guifg=#454545
  hi Cursor guibg=#AAAAAA guifg=bg

  " highlight color for NerdTree and COC
  hi CursorLine guibg=fg guifg=bg

  hi Directory guibg=bg guifg=fg
  hi ErrorMsg guibg=#991B1B guifg=fg
  hi Folded guibg=bg guifg=#454545
  hi LineNr guifg=#707070

  " highlight color when showing matching bracket
  hi MatchParen guibg=#707070 guifg=bg 

  hi MoreMsg guifg=fg guibg=bg
  hi NonText guifg=#707070
  hi Pmenu guibg=#383838 guifg=fg
  hi PmenuSel guifg=bg guibg=fg
  hi Search guibg=bg guifg=fg
  hi SignColumn guibg=bg guifg=fg
  hi Todo guibg=bg guifg=#454545
  hi VertSplit guibg=#637777 guifg=bg
  hi Visual guibg=fg guifg=bg
  hi WarningMsg guifg=#EF4444
  hi StatusLineNC guibg=bg guifg=fg
  
  hi Constant guifg=fg
  hi Identifier guifg=fg
  hi PreProc guifg=fg
  hi Special guifg=fg
  hi Statement guifg=fg
  hi Title guifg=fg
  hi Type guifg=fg
" }}}

" vim:foldlevel=0
